#!/bin/sh

set -eux

to_kernconf() {
    awk '{printf("MY%s\n", toupper($1))}'
}

# TODO handle signatures on pkg repos
# TODO fix this
print_poudriere_repo_conf() {
    printf '%s: {\n  url: "file://%s"\n  enabled: yes\n}\n' "$1" "$2"
}

print_freebsd_repo_conf() {
    cat <<EOF
FreeBSD: {
  url: "pkg+https://pkg.freebsd.org/$${ABI}/latest",
  mirror_type: "srv",
  signature_type: "fingerprints",
  fingerprints: "/usr/share/keys/pkg",
  enabled: "no"
}
EOF
}

pull_freebsd_src() {
    if test ! -d "${freebsd_src}/.git"; then
        git clone git@github.com:svmhdvn/freebsd-src.git "${freebsd_src}"
        git -C "${freebsd_src}" remote add upstream https://git.freebsd.org/src.git
    fi
    git -C "${freebsd_src}" pull upstream main --rebase --autostash
}

pull_freebsd_ports() {
    # TODO setup a downstream EMPT ports repo and rebase from upstream here
    if test ! -d "${freebsd_ports}/.git"; then
        git clone \
            --origin mymirrors \
            --branch empt \
            git@github.com:svmhdvn/freebsd-ports.git "${freebsd_ports}"
        git -C "${freebsd_ports}" remote add upstream https://git.freebsd.org/ports.git
        mkdir -p "${cache}/distfiles"
        doas poudriere ports -c -p "${ports_tree}" -m null -M "${freebsd_ports}"
    fi
    git -C "${freebsd_ports}" pull upstream main --rebase --autostash
}

# TODO find a cleaner way to do this
# Instructions from https://wiki.freebsd.org/PkgBase
local_pkgbase_upgrade() {
    # NOTE needs to maintain root for the entirety of this command to avoid
    # obliterating the /etc/passwd file
    doas sh -c "
env ABI=${target_abi} IGNORE_OSVERSION=yes pkg install -y -r pkgbase -g 'FreeBSD-*'
if test -r /etc/master.passwd.pkgsave || test -r /etc/group.pkgsave; then
    cp /etc/master.passwd.pkgsave /etc/master.passwd || true
    cp /etc/group.pkgsave /etc/group || true
    pwd_mkdb -p /etc/master.passwd
fi
test -r /etc/sysctl.conf.pkgsave && cp /etc/sysctl.conf.pkgsave /etc/sysctl.conf
"

    doas find / -name '*.pkgsave' | \
        sort | \
    	awk 'BEGIN {print "Leftover .pkgsave files (delete after double checking):"} {print}' | \
    	less
    doas rm -f /boot/kernel/linker.hints
}

build_mfs_image() {
    _worlddir="${HOME}/testworld"
    pull_freebsd_src
    grep '^[a-z]' "${target_confdir}/${target_kernconf}_LINT" \
        | sort -u \
        | tee "${target_confdir}/${target_kernconf}" "${freebsd_src}/sys/${target_arch}/conf/${target_kernconf}" > /dev/null

    make -C "${freebsd_src}" -j"${nproc}" \
        __MAKE_CONF="${target_confdir}/${target_hostname}-common-make.conf" \
        SRCCONF="${target_confdir}/${target_hostname}-host-src.conf" \
        SRC_ENV_CONF="${target_confdir}/${target_hostname}-host-src-env.conf" \
        KERNCONF="${target_kernconf}" \
        buildworld buildkernel

    doas make -C "${freebsd_src}" -j"${nproc}" \
        __MAKE_CONF="${target_confdir}/${target_hostname}-common-make.conf" \
        SRCCONF="${target_confdir}/${target_hostname}-host-src.conf" \
        SRC_ENV_CONF="${target_confdir}/${target_hostname}-host-src-env.conf" \
        KERNCONF="${target_kernconf}" \
        DESTDIR="${_worlddir}" \
        installworld installkernel
}

make_efi_image() {
    _imagename="testmfsimg"

    _worlddir="${HOME}/testworld"
    _efibootdir="${HOME}/testefidir"
    _mfsimg="${HOME}/${_imagename}"
    _ufsroot="${HOME}/testufsroot"

    _efipart="${HOME}/testefipart"
    _ufspart="${HOME}/testufspart"
    _finalimg="${HOME}/testusb.img"

    doas rm -rf "${_efibootdir}"
    mkdir -p "${_efibootdir}/EFI/BOOT"
    cp "${_worlddir}/boot/loader.efi" "${_efibootdir}/EFI/BOOT/BOOTX64.EFI"

    #-o fat_type=16 \
    #-o sectors_per_cluster=1 \
    makefs -t msdos \
	-o volume_label=EFISYS \
        -s 10m \
	"${_efipart}" "${_efibootdir}"

    printf '/dev/ufs/%s / ufs ro 0 0\ntmpfs /tmp tmpfs rw,mode=1777 0 0\n' "${_imagename}" | \
        doas tee -a "${_worlddir}/etc/fstab"

    doas makefs -o label="${_imagename}" "${_mfsimg}" "${_worlddir}"

    doas rm -rf "${_ufsroot}"
    mkdir -p "${_ufsroot}"
    cp -R "${_worlddir}/boot" "${_mfsimg}" "${_ufsroot}/"
    printf 'tmpfs_load=YES\nmfs_load=YES\nmfs_type=mfs_root\nmfs_name=/%s\nvfs.root.mountfrom="ufs:/dev/ufs/%s"\n' ${_imagename} ${_imagename} | \
        tee -a "${_ufsroot}/boot/loader.conf"
    makefs "${_ufspart}" "${_ufsroot}"

    mkimg -s gpt \
        -p efi:=${_efipart} \
        -p freebsd-ufs:=${_ufspart} \
        -o "${_finalimg}"
}

build_host_pkgbase() {
    pull_freebsd_src
    grep '^[a-z]' "${target_confdir}/${target_kernconf}_LINT" \
    	| sort -u \
    	| tee "${target_confdir}/${target_kernconf}" "${freebsd_src}/sys/${target_arch}/conf/${target_kernconf}" > /dev/null

    make -C "${freebsd_src}" -j"${nproc}" \
        __MAKE_CONF="${target_confdir}/${target_hostname}-common-make.conf" \
        SRCCONF="${target_confdir}/${target_hostname}-host-src.conf" \
        SRC_ENV_CONF="${target_confdir}/${target_hostname}-host-src-env.conf" \
        KERNCONF="${target_kernconf}" \
        buildworld buildkernel

    # TODO file upstream bug for PKG_VERSION issues
    make -C "${freebsd_src}" \
        __MAKE_CONF="${target_confdir}/${target_hostname}-common-make.conf" \
        SRCCONF="${target_confdir}/${target_hostname}-host-src.conf" \
        SRC_ENV_CONF="${target_confdir}/${target_hostname}-host-src-env.conf" \
        KERNCONF="${target_kernconf}" \
        REPODIR="${repodir_prefix}-host" \
        PKG_VERSION="${pkgbase_version}" \
        stage-packages-world stage-packages-kernel \
        create-packages-world create-packages-kernel \
        real-update-packages
}

build_jail_pkgbase() {
    pull_freebsd_src

    # TODO file upstream bug to figure out the order of target dependencies
    # between 'buildworld' and the stage/create/sign targets
    # For now, use two make invocations
    make -C "${freebsd_src}" -j"${nproc}" \
        __MAKE_CONF="${target_confdir}/${target_hostname}-common-make.conf" \
        SRCCONF="${target_confdir}/${target_hostname}-jail-src.conf" \
        SRC_ENV_CONF="${target_confdir}/${target_hostname}-jail-src-env.conf" \
        buildworld

    # TODO file upstream bug for PKG_VERSION issues
    make -C "${freebsd_src}" \
        __MAKE_CONF="${target_confdir}/${target_hostname}-common-make.conf" \
        SRCCONF="${target_confdir}/${target_hostname}-jail-src.conf" \
        SRC_ENV_CONF="${target_confdir}/${target_hostname}-jail-src-env.conf" \
        REPODIR="${repodir_prefix}-jail" \
        PKG_VERSION="${pkgbase_version}" \
        stage-packages-world create-packages-world real-update-packages
}

poudriere_options() {
    pull_freebsd_ports
    doas cp \
        "${target_confdir}/${target_hostname}-common-make.conf" \
        "${poudriere_etc}/${target_hostname}-make.conf"

    if test ! -d "${poudriere_portoptions}" && test -d "${my_portoptions}"; then
        doas cp -R "${my_portoptions}" "${poudriere_portoptions}"
    fi

    # Only use our portoptions make.conf for options directory creation. This
    # prevents the defaults from overriding the options directory during a
    # poudriere bulk run.
    doas cp \
        "${target_confdir}/${target_hostname}-portoptions-make.conf" \
        "${poudriere_etc}/${ports_tree}-${target_hostname}-make.conf"
    doas poudriere options -j "${ports_builder}" -p "${ports_tree}" -z "${target_hostname}" -f "${ports_pkglist}"
    doas rm -f "${poudriere_etc}/${ports_tree}-${target_hostname}-make.conf"

    # Treat the poudriere_etc options directory as the ground truth.
    rm -rf "${my_portoptions}"
    cp -R "${poudriere_portoptions}" "${my_portoptions}"
}

poudriere_bulk() {
    doas poudriere bulk -j "${ports_builder}" -p "${ports_tree}" -z "${target_hostname}" -f "${ports_pkglist}"
    doas poudriere pkgclean -y -j "${ports_builder}" -p "${ports_tree}" -z "${target_hostname}" -f "${ports_pkglist}"
    mkdir -p "${tarballs}"
    tar -C "${ports_repo}/.latest" -cvf "${tarballs}/${target_hostname}-ports.tar.zst" --zstd --strip-components 1 .
}

bootstrap_step1() {
    # NOTES:
    # Must run with the following conditions:
    # * as root (with doas is fine)
    # * on a freshly-installed FreeBSD 14.0-RELEASE system
    # * inside the git repo
    #
    # REQUIRED PKGS BEFORE BOOTSTRAP:
    # * doas (configured with 'permit nopass :wheel')

    # 1) install required packages from upstream mirror
    doas pkg install -y git poudriere ccache

    # 2) setup poudriere
    # TODO change ccache directory to a better global location, possibly /var/cache/ccache
    # TODO remove PKG_NO_VERSION_FOR_DEPS when stabilized upstream
    # NOTE add back if needed to the sed command:
    #   -e 's/.*TMPFS_BLACKLIST=.*/TMPFS_BLACKLIST="ghc* llvm* rust*"/' \
    #   -e 's%.*TMPFS_BLACKLIST_TMPDIR=.*%TMPFS_BLACKLIST_TMPDIR="${BASEFS}/data/cache/tmp"%' \
    sed \
        -e 's/.*ALLOW_MAKE_JOBS=.*/ALLOW_MAKE_JOBS=yes/' \
        -e 's/.*BAD_PKGNAME_DEPS_ARE_FATAL=.*/BAD_PKGNAME_DEPS_ARE_FATAL=yes/' \
        -e 's%.*BASEFS=.*%BASEFS=/usr/local/poudriere%' \
        -e "s/.*BUILDER_HOSTNAME=.*/BUILDER_HOSTNAME=poudriere.home.arpa/" \
        -e 's%.*CCACHE_DIR=.*%CCACHE_DIR=/root/.ccache%' \
        -e 's%.*DISTFILES_CACHE=.*%DISTFILES_CACHE=/usr/ports/distfiles%' \
        -e 's/.*NOLINUX=.*/NOLINUX=yes/' \
        -e 's/.*PACKAGE_FETCH_BRANCH=.*/PACKAGE_FETCH_BRANCH=latest/' \
        -e 's/.*PACKAGE_FETCH_WHITELIST=.*/PACKAGE_FETCH_WHITELIST="gcc* rust ghc llvm* texlive-texmf"/' \
        -e 's/.*PKG_NO_VERSION_FOR_DEPS=.*/PKG_NO_VERSION_FOR_DEPS=yes/' \
        -e 's/.*PRESERVE_TIMESTAMP=.*/PRESERVE_TIMESTAMP=yes/' \
        -e 's/.*PRIORITY_BOOST=.*/PRIORITY_BOOST="curl"/' \
        -e 's%.*RESOLV_CONF=.*%RESOLV_CONF=/etc/resolv.conf%' \
        -e 's/.*SAVE_WRKDIR=.*/SAVE_WRKDIR="yes"/' \
        -e 's/.*USE_TMPFS=.*/USE_TMPFS="yes"/' \
        -e 's/.*WRKDIR_ARCHIVE_FORMAT=.*/WRKDIR_ARCHIVE_FORMAT=tzst/' \
        -e 's/.*ZPOOL=.*/ZPOOL=zroot/' \
        /usr/local/etc/poudriere.conf.sample \
        | doas tee /usr/local/etc/poudriere.conf > /dev/null

    # 3) build system pkgbase
    doas kldload -n filemon
    build_host_pkgbase

    # 4) convert system into a pkgbase installation
    doas mkdir -p /usr/local/etc/pkg/repos
    # TODO fix this undefined host_pkgbase_repo variable
    print_poudriere_repo_conf pkgbase "${host_pkgbase_repo}" | doas tee /usr/local/etc/pkg/repos/poudriere_pkgbase.conf > /dev/null

    doas env ABI="${target_abi}" IGNORE_OSVERSION=yes pkg install -y -r poudriere_pkgbase -g 'FreeBSD-*'
    local_pkgbase_upgrade
}

bootstrap_step2() {
    # 5) build ports
    poudriere_options
    poudriere_bulk

    # 6) reinstall all system pkgs with the new poudriere repo
    print_poudriere_repo_conf ports "${ports_repo}" | doas tee /usr/local/etc/pkg/repos/poudriere_ports.conf > /dev/null
    print_freebsd_repo_conf | doas tee /usr/local/etc/pkg/repos/FreeBSD.conf > /dev/null

    doas pkg upgrade -y -r poudriere_ports -f
}

target_hostname="$(hostname)"
while getopts h: name
do
  case "${name}" in
    h) target_hostname="${OPTARG}" ;;
    ?)
      echo "Usage: $0: [-h host] command" >&2
      exit 64 # EX_USAGE
      ;;
    *) ;;
  esac
done
shift $((OPTIND - 1))

realpath="$(realpath "$0")"
top="$(dirname "${realpath}")"
cache="${XDG_CACHE_HOME:-${HOME}/.cache}"

# TODO support other architectures when the need arises
target_arch="$(uname -p)"
freebsd_major_version=15
freebsd_minor_version=0
target_abi="FreeBSD:${freebsd_major_version}:${target_arch}"

freebsd_src="${HOME}/src/freebsd-src"
freebsd_ports="${HOME}/src/freebsd-ports"

# NOTE use this to determine a system's CPUTYPE, then add it to a make.conf
# inside the hosts/ directory
#cputype="$(cc -v -x c -E -march=native /dev/null 2>&1 | sed -n 's/.*-target-cpu *\([^ ]*\).*/\1/p')"

poudriere_etc=/usr/local/etc/poudriere.d
poudriere_data=/usr/local/poudriere/data

# TODO change to a more descriptive name, like "empt_ports" or something
ports_tree=default
target_confdir="${top}/hosts/${target_hostname}"
target_kernconf="$(echo "${target_hostname}" | to_kernconf)"
host_pkgbase_builder="h${freebsd_major_version}${target_kernconf}"
jail_pkgbase_builder="j${freebsd_major_version}${target_kernconf}"

# TODO pkg-static is unfortunately built as part of ports-mgmt/pkg. This means
# that the builder jail's base system libraries get statically linked into
# the binary. The builder jail uses a different CPUTYPE than the target, so we
# run into SIGILL illegal instruction crashes. We need to figure this out
# properly.
# NOTE to avoid this, we build all packages using the default upstream RELEASE
# jail instead of the custom host
# jail (even though we really should build using the host jail for maximum building performance).
#builder_kernconf="$(echo "$builder_hostname" | to_kernconf)"
#ports_builder="poudriere_${freebsd_branch}_${builder_kernconf}"
ports_builder="r${freebsd_major_version}${freebsd_minor_version}${target_arch}"

# TODO move to ~/.cache/mypoudriere
repodir_prefix="${cache}/pkgbase_repos/${target_hostname}"
ports_repo="${poudriere_data}/packages/${ports_builder}-${ports_tree}-${target_hostname}"

poudriere_portoptions="${poudriere_etc}/${ports_builder}-${ports_tree}-${target_hostname}-options"
my_portoptions="${target_confdir}/portoptions"

tarballs="${cache}/mypoudriere/tarballs"
ports_pkglist="${top}/hosts/${target_hostname}/pkglist.txt"

nproc="$(nproc)"
pkgbase_version="${freebsd_major_version}.snap$(date -u +%Y%m%d%H%M%S)"

case "$1" in
  bootstrap1)
    bootstrap_step1
    ;;
  bootstrap2)
    bootstrap_step2
    ;;
  upgrade1)
    build_host_pkgbase
    local_pkgbase_upgrade
    ;;
  upgrade2)
    poudriere_options
    poudriere_bulk
    doas pkg upgrade -y -r ports
    ;;
  upgrade_builder)
    if poudriere jail -i -j "${ports_builder}"; then
        doas poudriere jail -u -j "${ports_builder}"
    else
        # TODO
        #doas poudriere jail -c -j "${ports_builder}" \
        #    -v "${freebsd_major_version}.${freebsd_minor_version}-CURRENT" \
        #    -m pkgbase=
        true
    fi
    ;;
  host_pkgbase)
    build_host_pkgbase
    mkdir -p "${tarballs}"
    tar -C "${repodir_prefix}-host/${target_abi}/latest" -cvf "${tarballs}/${target_hostname}-host-pkgbase.tar.zst" --zstd --strip-components 1 .
    ;;
  jail_pkgbase)
    build_jail_pkgbase
    mkdir -p "${tarballs}"
    tar -C "${repodir_prefix}-jail/${target_abi}/latest" -cvf "${tarballs}/${target_hostname}-jail-pkgbase.tar.zst" --zstd --strip-components 1 .
    ;;
  update_remote_repos)
    # NOTE:
    # * the trailing slashes for rsync are required to update the directory contents
    # * the target hostname MUST be set as an SSH host alias in ~/.ssh/config
    # TODO turn all of these rsync calls into one call
    rsync -Pacv --delete "${repodir_prefix}-host/${target_abi}/latest"/ "${target_hostname}:.cache/repos/host_pkgbase"/
    rsync -Pacv --delete "${repodir_prefix}-jail/${target_abi}/latest"/ "${target_hostname}:.cache/repos/jail_pkgbase"/
    rsync -Pacv --delete "${ports_repo}/.latest"/ "${target_hostname}:.cache/repos/ports"/
    ;;
  options)
    poudriere_options
    ;;
  bulk)
    poudriere_bulk
    ;;
  mfs)
    build_mfs_image
    make_efi_image
    ;;
  hostconfig)
    make -C "${freebsd_src}" \
        __MAKE_CONF="${target_confdir}/${target_hostname}-common-make.conf" \
        SRCCONF="${target_confdir}/${target_hostname}-host-src.conf" \
        SRC_ENV_CONF="${target_confdir}/${target_hostname}-host-src-env.conf" \
        showconfig
    ;;
  jailconfig)
    make -C "${freebsd_src}" \
        __MAKE_CONF="${target_confdir}/${target_hostname}-common-make.conf" \
        SRCCONF="${target_confdir}/${target_hostname}-jail-src.conf" \
        SRC_ENV_CONF="${target_confdir}/${target_hostname}-jail-src-env.conf" \
        showconfig
    ;;
  ports)
    poudriere_options
    poudriere_bulk
    ;;
  destroy)
    doas rm -f \
      "${poudriere_etc}/${target_hostname}"-*.conf \
      "${poudriere_etc}/${ports_tree}-${target_hostname}"-*.conf \
      "${poudriere_etc}/${host_pkgbase_builder}"-*.conf \
      "${poudriere_etc}/${jail_pkgbase_builder}"-*.conf \
      "${poudriere_portoptions}" \
      "${poudriere_data}/images/${host_pkgbase_builder}-repo" \
      "${poudriere_data}/images/${jail_pkgbase_builder}-repo" \
      "${ports_repo}" \
      "${tarballs}/${target_hostname}"-*.tar.zst
    ;;
  *)
    echo "unknown command: '$1'" >&2
    exit 64 # EX_USAGE
    ;;
esac
